#!/usr/bin/env node

/**
 * E2E Test: Full Recta Conversation Flow
 * Tests all 4 phases without UI interaction
 */

const BASE_URL = process.env.TEST_URL || 'http://localhost:3000';

// Test messages from test-messages.md
const TEST_MESSAGES = {
  context: "Vi √§r ett B2B SaaS-f√∂retag med 25 anst√§llda i Stockholm. Vi √§r i Series A-fas med 30 MSEK i funding fr√•n Creandum. Just nu har vi 5 utvecklare (3 backend, 2 frontend) som rapporterar till v√•r CTO. Vi beh√∂ver rekrytera en Senior Backend Developer f√∂r att skala v√•r plattform. Budgeten √§r 700-850k/√•r inklusive sociala avgifter. Vi vill att personen b√∂rjar inom 2-3 m√•nader. M√•let √§r att dubblera utvecklingsteamet inom 12 m√•nader eftersom vi v√§xer snabbt - just nu 200% YoY revenue growth.",
  
  problem: "V√•rt backend kan inte hantera den 10x trafik-√∂kning vi f√∂rv√§ntar oss n√§sta kvartal n√§r vi lanserar i Tyskland. Grundorsaken √§r att vi byggde en monolitisk arkitektur under MVP-fasen f√∂r 2 √•r sedan, och nu har vi betydande teknisk skuld. Den st√∂rsta utmaningen √§r att vi m√•ste migrera till microservices under p√•g√•ende tillv√§xt utan n√•gon downtime - v√•ra st√∂rsta kunder har SLA p√• 99.9%. Vi har f√∂rs√∂kt optimera den befintliga koden men det gav bara 2x f√∂rb√§ttring, inte 10x som vi beh√∂ver. Vi m√•ste l√∂sa detta nu eftersom vi har 6 m√•naders runway kvar och kan inte pausa produktutvecklingen. Det kostar oss cirka 50k EUR per m√•nad i f√∂rlorad revenue att inte kunna onboarda nya enterprise-kunder p√• grund av skalningsproblem.",
  
  solution: "Jag gillar Scenario A: Senior Backend Developer (700-850k). Det passar v√•r budget perfekt och vi √§r f√∂r sm√• f√∂r att ha en duo just nu. Vi beh√∂ver n√•gon som kan √§ga migrationen sj√§lv och b√∂rja leverera fr√•n dag ett utan att beh√∂va handledning.",
  
  action: [
    "Jag (VD) √§ger processen tillsammans med v√•r CTO. Vi delar ansvaret.",
    "V√•r CTO g√∂r teknisk screening, jag g√∂r culture fit-intervjuer.",
    "4 omg√•ngar: 1) Phone screen (CTO, 30 min), 2) Tech interview (2h coding), 3) Culture fit (mig, 1h), 4) Final (hela teamet, 1h)",
    "Nej, jag kan besluta sj√§lv upp till 900k.",
    "Ja, inga blockers. JD kan vara klar p√• fredag, publicera m√•ndag.",
    "D√• √∂ppnar vi f√∂r en senior konsult som backup, men det √§r plan B.",
    "M√•nad 1: Fullst√§ndig system-f√∂rst√•else. M√•nad 2: √Ñger en microservice-migration. M√•nad 3: Tr√§nat en junior och levererar i production."
  ]
};

async function testChatAPI(phase, message, existingInsights = [], allMessages = []) {
  const userMessage = {
    role: 'user',
    content: message,
    timestamp: new Date().toISOString()
  };
  
  const response = await fetch(`${BASE_URL}/api/chat`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      messages: [...allMessages, userMessage],
      existingInsights: existingInsights,
      currentConfidence: 0,
      currentPhase: phase,
      isNewPhase: false
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Chat API failed (${phase}): ${response.status} - ${errorText}`);
  }

  return await response.json();
}

async function testGenerateAPI(type, insights) {
  const response = await fetch(`${BASE_URL}/api/generate`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ type, insights })
  });

  if (!response.ok) {
    throw new Error(`Generate API failed (${type}): ${response.status}`);
  }

  return await response.json();
}

async function runE2ETest() {
  console.log('üß™ Starting E2E Test...\n');
  
  let allInsights = [];
  let allMessages = [];
  
  try {
    // PHASE 1: CONTEXT
    console.log('üìã PHASE 1: Context');
    const contextResult = await testChatAPI('Context', TEST_MESSAGES.context, allInsights, allMessages);
    allInsights = [...allInsights, ...(contextResult.insights || [])];
    
    // Add AI response to message history
    allMessages.push({
      role: 'user',
      content: TEST_MESSAGES.context,
      timestamp: new Date().toISOString()
    });
    allMessages.push({
      role: 'assistant',
      content: contextResult.message,
      timestamp: new Date().toISOString()
    });
    
    console.log(`  ‚úì Confidence: ${contextResult.confidence}%`);
    console.log(`  ‚úì Insights: ${contextResult.insights?.length || 0}`);
    
    if (contextResult.confidence < 85) {
      console.log('  ‚ö†Ô∏è  Warning: Low confidence after context');
    }
    
    // PHASE 2: PROBLEM DISCOVERY
    console.log('\nüîç PHASE 2: Problem Discovery');
    const problemResult = await testChatAPI('Problem Discovery', TEST_MESSAGES.problem, allInsights, allMessages);
    allInsights = [...allInsights, ...(problemResult.insights || [])];
    
    allMessages.push({
      role: 'user',
      content: TEST_MESSAGES.problem,
      timestamp: new Date().toISOString()
    });
    allMessages.push({
      role: 'assistant',
      content: problemResult.message,
      timestamp: new Date().toISOString()
    });
    
    console.log(`  ‚úì Confidence: ${problemResult.confidence}%`);
    console.log(`  ‚úì Insights: ${problemResult.insights?.length || 0}`);
    
    // PHASE 3: SOLUTION DESIGN
    console.log('\nüí° PHASE 3: Solution Design');
    const solutionResult = await testChatAPI('Solution Design', TEST_MESSAGES.solution, allInsights, allMessages);
    allInsights = [...allInsights, ...(solutionResult.insights || [])];
    
    allMessages.push({
      role: 'user',
      content: TEST_MESSAGES.solution,
      timestamp: new Date().toISOString()
    });
    allMessages.push({
      role: 'assistant',
      content: solutionResult.message,
      timestamp: new Date().toISOString()
    });
    
    console.log(`  ‚úì Confidence: ${solutionResult.confidence}%`);
    console.log(`  ‚úì Insights: ${solutionResult.insights?.length || 0}`);
    
    if (solutionResult.autoGenerateScenarios) {
      console.log('  üéØ Auto-scenario generation triggered!');
    }
    
    // PHASE 4: ACTION PLAN (multiple messages)
    console.log('\nüéØ PHASE 4: Action Plan');
    for (let i = 0; i < TEST_MESSAGES.action.length; i++) {
      const actionResult = await testChatAPI('Action Plan', TEST_MESSAGES.action[i], allInsights, allMessages);
      allInsights = [...allInsights, ...(actionResult.insights || [])];
      
      allMessages.push({
        role: 'user',
        content: TEST_MESSAGES.action[i],
        timestamp: new Date().toISOString()
      });
      allMessages.push({
        role: 'assistant',
        content: actionResult.message,
        timestamp: new Date().toISOString()
      });
      
      console.log(`  ‚úì Message ${i + 1}/${TEST_MESSAGES.action.length} - Confidence: ${actionResult.confidence}%`);
    }
    
    // DELIVERABLES GENERATION
    console.log('\nüìÑ GENERATING DELIVERABLES');
    
    const deliverables = [
      'job_description',
      'compensation_analysis',
      'interview_questions',
      'success_plan'
    ];
    
    for (const type of deliverables) {
      try {
        const result = await testGenerateAPI(type, allInsights);
        console.log(`  ‚úì ${type}: Success`);
      } catch (error) {
        console.log(`  ‚úó ${type}: ${error.message}`);
      }
    }
    
    // SUMMARY
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ E2E TEST COMPLETED');
    console.log('='.repeat(50));
    console.log(`Total insights collected: ${allInsights.length}`);
    console.log(`\nAll insights:\n${allInsights.join('\n')}`);
    
  } catch (error) {
    console.error('\n‚ùå TEST FAILED');
    console.error(error);
    process.exit(1);
  }
}

// Run test
runE2ETest().then(() => {
  console.log('\n‚úÖ All tests passed!');
  process.exit(0);
}).catch(err => {
  console.error('\n‚ùå Test suite failed:', err);
  process.exit(1);
});


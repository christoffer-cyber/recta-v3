import { PHASE_PROMPTS, type PhasePromptConfig } from './phase-prompts';

export interface SystemPromptOptions {
  phase: string;
  insights: string[];
  confidence: number;
  researchContext?: string;
  isNewPhase?: boolean;
}

export function buildSystemPrompt(options: SystemPromptOptions): string {
  const config = PHASE_PROMPTS[options.phase];
  
  if (!config) {
    console.warn(`[Prompt Builder] Unknown phase: ${options.phase}, using Context`);
    return buildSystemPrompt({ ...options, phase: 'Context' });
  }

  const basePrompt = buildBasePrompt(config);
  const contextSection = buildContextSection(options.insights, options.confidence, config, options.isNewPhase);
  const researchSection = options.researchContext || '';
  const behaviorGuidelines = buildBehaviorGuidelines();
  const insightExtraction = buildInsightExtraction(config);

  return `${basePrompt}

${contextSection}

${researchSection}

${behaviorGuidelines}

${insightExtraction}`;
}

function buildBasePrompt(config: PhasePromptConfig): string {
  return `${config.role}

## DINA M√ÖL I DENNA FAS:
${config.goals.map((g, i) => `${i + 1}. ${g}`).join('\n')}

## NYCKELFR√ÖGOR ATT UTFORSKA:
${config.questions.map((q, i) => `${i + 1}. ${q}`).join('\n')}

## √ñVERG√ÖNGSKRITERIER:
${config.transitionCriteria}`;
}

function buildContextSection(
  insights: string[], 
  confidence: number,
  config: PhasePromptConfig,
  isNewPhase?: boolean
): string {
  // CRITICAL: If brand new phase with 0 confidence, start completely fresh
  if (isNewPhase && confidence < 15) {
    return `## üö® VIKTIGT: DETTA √ÑR EN NY FAS üö®

Du har precis b√∂rjat fasen: ${config.role.split('Du √§r')[1] || 'denna fas'}

**IGNORERA all tidigare konversation om andra faser.**

Din ENDA uppgift nu √§r att samla information om:

REQUIRED (M√ÖSTE ha):
${config.insightCategories.required.map(c => `- ${c}`).join('\n')}

OPTIONAL (Bonus):
${config.insightCategories.optional.map(c => `- ${c}`).join('\n')}

**Confidence √§r ${confidence}% - du har INTE nog information √§n.**

**S√ÑG INTE "vi √§r klara" eller "redo att g√• vidare".**
**B√ñRJA st√§lla fr√•gor relevanta f√∂r DENNA fas.**`;
  }

  // If no insights yet
  if (insights.length === 0) {
    return `## NUVARANDE KONTEXT:
Inga insights samlade √§n (${confidence}% confidence).

B√∂rja samla dessa REQUIRED kategorier:
${config.insightCategories.required.map(c => `- ${c}`).join('\n')}

Valfria kategorier (bonus):
${config.insightCategories.optional.map(c => `- ${c}`).join('\n')}`;
  }

  // Filter insights - ONLY show phase-relevant ones
  const relevantCategories = [
    ...config.insightCategories.required,
    ...config.insightCategories.optional
  ];
  
  const relevantInsights = insights.filter(insight => {
    const category = insight.split(':')[0].trim();
    return relevantCategories.some(reqCat => 
      category.toLowerCase().includes(reqCat.toLowerCase()) ||
      reqCat.toLowerCase().includes(category.toLowerCase())
    );
  });

  // If NO relevant insights for THIS phase, treat as fresh start
  if (relevantInsights.length === 0 && confidence < 30) {
    return `## NUVARANDE KONTEXT:

Vi har information fr√•n tidigare fas, men f√∂r DENNA fas (${confidence}% confidence) beh√∂ver vi samla:

REQUIRED:
${config.insightCategories.required.map(c => `- ${c}`).join('\n')}

**B√∂rja st√§ll fr√•gor relevanta f√∂r dessa kategorier.**`;
  }

  // Show only relevant insights
  const grouped = groupInsightsByCategory(relevantInsights);
  const deduplicatedInsights = Array.from(new Set(relevantInsights));

  // Check coverage
  const missingRequired = config.insightCategories.required.filter(
    cat => !grouped[cat] || grouped[cat].length === 0
  );

  let coverageStatus = '';
  if (missingRequired.length > 0) {
    coverageStatus = `

**SAKNAS REQUIRED KATEGORIER (fokusera h√§r):**
${missingRequired.map(c => `- ${c} ‚Üê FR√ÖGA OM DETTA!`).join('\n')}

**Du har INTE tillr√§ckligt f√∂r att g√• vidare √§n.**`;
  } else if (confidence < 90) {
    coverageStatus = `

‚úì Required kategorier t√§ckta, men confidence endast ${confidence}%.
**Forts√§tt samla mer detaljer innan du s√§ger "klart".**`;
  } else {
    coverageStatus = '\n\n‚úì Alla required kategorier t√§ckta med h√∂g confidence!';
  }

  return `## NUVARANDE KONTEXT:
Vi har samlat ${relevantInsights.length} relevanta insights f√∂r denna fas (${confidence}% confidence):

${deduplicatedInsights.slice(0, 8).map((insight, i) => `${i + 1}. ${insight}`).join('\n')}
${deduplicatedInsights.length > 8 ? `... och ${deduplicatedInsights.length - 8} till` : ''}
${coverageStatus}

**Bygg p√• dessa insights - forts√§tt st√§lla fr√•gor tills confidence n√•r 90%+.**`;
}

function groupInsightsByCategory(insights: string[]): Record<string, string[]> {
  const grouped: Record<string, string[]> = {};
  
  insights.forEach(insight => {
    const [category] = insight.split(':');
    const cat = category.trim();
    if (!grouped[cat]) grouped[cat] = [];
    grouped[cat].push(insight);
  });
  
  return grouped;
}

function buildBehaviorGuidelines(): string {
  return `## KONVERSATIONSSTIL:
- Var samtalsam och naturlig, inte robotisk
- St√§ll EN fr√•ga √•t g√•ngen (max tv√• om n√§ra relaterade)
- Lyssna aktivt - referera till vad anv√§ndaren sa tidigare
- Anv√§nd "Jag f√∂rst√•r" och "Det l√•ter vettigt" f√∂r att visa f√∂rst√•else
- Utmana antaganden artigt n√§r det beh√∂vs
- Var koncis - undvik l√•nga f√∂rklaringar om inte ombedd
- Naturlig svenska (du kan mixa in engelska termer n√§r l√§mpligt)

## üö® KRITISKT - FAS-REGLER:
- S√ÑG ALDRIG "vi √§r klara" eller "redo att g√• vidare" f√∂rr√§n confidence √§r 90%+
- S√ÑG ALDRIG "perfekt, l√•t oss g√• vidare" om du inte samlat ALL required information
- Om confidence < 90%: FORTS√ÑTT ST√ÑLLA FR√ÖGOR
- Varje fas m√•ste genomf√∂ras ordentligt - INGEN genv√§g

## RESEARCH-ANV√ÑNDNING (om tillg√§nglig):
N√§r research-kontext finns:
- Referera insights naturligt: "Jag ser att f√∂retag i liknande situation..."
- Anv√§nd f√∂r att validera t√§nkande: "Det st√§mmer med vad som brukar fungera..."
- S√ÑG ALDRIG "research shows" eller "enligt data"
- Visa bara informerad f√∂rst√•else

## VIKTIGA REGLER:
- Extrahera insights kontinuerligt i KATEGORI-format (se nedan)
- Upprepa inte fr√•gor om info vi redan har
- Utveckla konversationen mot att t√§cka saknade kategorier
- Kvalitet √∂ver kvantitet - bara substantial insights
- Varje insight ska vara specifik och actionable`;
}

function buildInsightExtraction(config: PhasePromptConfig): string {
  return `## INSIGHT-EXTRAKTIONSFORMAT:

**KRITISKT: Anv√§nd kategori-prefix f√∂r att confidence-systemet ska fungera!**

Required kategorier f√∂r denna fas:
${config.insightCategories.required.map(c => `- ${c}:`).join('\n')}

Valfria kategorier (bonus):
${config.insightCategories.optional.map(c => `- ${c}:`).join('\n')}

**Format-regler:**
1. B√∂rja med kategorinamn f√∂ljt av kolon: "F√∂retag:", "Problem:", etc
2. Var specifik och substantial (min 15-20 tecken faktiskt inneh√•ll)
3. Anv√§nd inte "unknown", "ej specificerat", eller tomma v√§rden
4. Uppdatera befintliga insights om ny info kompletterar dem
5. Extrahera bara NYA insights som inte redan finns i kontext

**Bra exempel:**
${config.insightExamples.map(e => `‚úì ${e}`).join('\n')}

**D√•liga exempel:**
‚úó F√∂retag: okej (f√∂r vag, f√∂r kort)
‚úó Roll: unknown (inneh√•ller "unknown")
‚úó Team: inte angivet (tomt v√§rde)
‚úó Budget: cirka (inget faktiskt nummer)

L√§gg till insights i ditt svar med:
###INSIGHTS###
- [Kategori: specifikt substantial inneh√•ll]
- [Kategori: specifikt substantial inneh√•ll]

Kom ih√•g: Kvalitet > Kvantitet. B√§ttre 2 substantial insights √§n 5 vaga.`;
}

